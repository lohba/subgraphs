// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContractExpired extends ethereum.Event {
  get params(): ContractExpired__Params {
    return new ContractExpired__Params(this);
  }
}

export class ContractExpired__Params {
  _event: ContractExpired;

  constructor(event: ContractExpired) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PositionSettled extends ethereum.Event {
  get params(): PositionSettled__Params {
    return new PositionSettled__Params(this);
  }
}

export class PositionSettled__Params {
  _event: PositionSettled;

  constructor(event: PositionSettled) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralReturned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get longTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shortTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokensCreated extends ethereum.Event {
  get params(): TokensCreated__Params {
    return new TokensCreated__Params(this);
  }
}

export class TokensCreated__Params {
  _event: TokensCreated;

  constructor(event: TokensCreated) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralUsed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensMinted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensRedeemed extends ethereum.Event {
  get params(): TokensRedeemed__Params {
    return new TokensRedeemed__Params(this);
  }
}

export class TokensRedeemed__Params {
  _event: TokensRedeemed;

  constructor(event: TokensRedeemed) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateralReturned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensRedeemed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UMALongShortPair__getPositionTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class UMALongShortPair extends ethereum.SmartContract {
  static bind(address: Address): UMALongShortPair {
    return new UMALongShortPair("UMALongShortPair", address);
  }

  collateralPerPair(): BigInt {
    let result = super.call(
      "collateralPerPair",
      "collateralPerPair():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralPerPair(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralPerPair",
      "collateralPerPair():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralToken(): Address {
    let result = super.call(
      "collateralToken",
      "collateralToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralToken",
      "collateralToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractState(): i32 {
    let result = super.call("contractState", "contractState():(uint8)", []);

    return result[0].toI32();
  }

  try_contractState(): ethereum.CallResult<i32> {
    let result = super.tryCall("contractState", "contractState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  create(tokensToCreate: BigInt): BigInt {
    let result = super.call("create", "create(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokensToCreate)
    ]);

    return result[0].toBigInt();
  }

  try_create(tokensToCreate: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("create", "create(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokensToCreate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  customAncillaryData(): Bytes {
    let result = super.call(
      "customAncillaryData",
      "customAncillaryData():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_customAncillaryData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "customAncillaryData",
      "customAncillaryData():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  expirationTimestamp(): BigInt {
    let result = super.call(
      "expirationTimestamp",
      "expirationTimestamp():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_expirationTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expirationTimestamp",
      "expirationTimestamp():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expiryPercentLong(): BigInt {
    let result = super.call(
      "expiryPercentLong",
      "expiryPercentLong():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_expiryPercentLong(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expiryPercentLong",
      "expiryPercentLong():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expiryPrice(): BigInt {
    let result = super.call("expiryPrice", "expiryPrice():(int256)", []);

    return result[0].toBigInt();
  }

  try_expiryPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiryPrice", "expiryPrice():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  financialProductLibrary(): Address {
    let result = super.call(
      "financialProductLibrary",
      "financialProductLibrary():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_financialProductLibrary(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "financialProductLibrary",
      "financialProductLibrary():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  finder(): Address {
    let result = super.call("finder", "finder():(address)", []);

    return result[0].toAddress();
  }

  try_finder(): ethereum.CallResult<Address> {
    let result = super.tryCall("finder", "finder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentTime(): BigInt {
    let result = super.call("getCurrentTime", "getCurrentTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTime",
      "getCurrentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionTokens(
    sponsor: Address
  ): UMALongShortPair__getPositionTokensResult {
    let result = super.call(
      "getPositionTokens",
      "getPositionTokens(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(sponsor)]
    );

    return new UMALongShortPair__getPositionTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPositionTokens(
    sponsor: Address
  ): ethereum.CallResult<UMALongShortPair__getPositionTokensResult> {
    let result = super.tryCall(
      "getPositionTokens",
      "getPositionTokens(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(sponsor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UMALongShortPair__getPositionTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  longToken(): Address {
    let result = super.call("longToken", "longToken():(address)", []);

    return result[0].toAddress();
  }

  try_longToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("longToken", "longToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  optimisticOracleLivenessTime(): BigInt {
    let result = super.call(
      "optimisticOracleLivenessTime",
      "optimisticOracleLivenessTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_optimisticOracleLivenessTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optimisticOracleLivenessTime",
      "optimisticOracleLivenessTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  optimisticOracleProposerBond(): BigInt {
    let result = super.call(
      "optimisticOracleProposerBond",
      "optimisticOracleProposerBond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_optimisticOracleProposerBond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optimisticOracleProposerBond",
      "optimisticOracleProposerBond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pairName(): string {
    let result = super.call("pairName", "pairName():(string)", []);

    return result[0].toString();
  }

  try_pairName(): ethereum.CallResult<string> {
    let result = super.tryCall("pairName", "pairName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  prepaidProposerReward(): BigInt {
    let result = super.call(
      "prepaidProposerReward",
      "prepaidProposerReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prepaidProposerReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prepaidProposerReward",
      "prepaidProposerReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceIdentifier(): Bytes {
    let result = super.call(
      "priceIdentifier",
      "priceIdentifier():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_priceIdentifier(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "priceIdentifier",
      "priceIdentifier():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  redeem(tokensToRedeem: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokensToRedeem)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(tokensToRedeem: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokensToRedeem)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settle(longTokensToRedeem: BigInt, shortTokensToRedeem: BigInt): BigInt {
    let result = super.call("settle", "settle(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(longTokensToRedeem),
      ethereum.Value.fromUnsignedBigInt(shortTokensToRedeem)
    ]);

    return result[0].toBigInt();
  }

  try_settle(
    longTokensToRedeem: BigInt,
    shortTokensToRedeem: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("settle", "settle(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(longTokensToRedeem),
      ethereum.Value.fromUnsignedBigInt(shortTokensToRedeem)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shortToken(): Address {
    let result = super.call("shortToken", "shortToken():(address)", []);

    return result[0].toAddress();
  }

  try_shortToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("shortToken", "shortToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timerAddress(): Address {
    let result = super.call("timerAddress", "timerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_timerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("timerAddress", "timerAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get params(): ConstructorCallParamsStruct {
    return changetype<ConstructorCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallParamsStruct extends ethereum.Tuple {
  get pairName(): string {
    return this[0].toString();
  }

  get expirationTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get collateralPerPair(): BigInt {
    return this[2].toBigInt();
  }

  get priceIdentifier(): Bytes {
    return this[3].toBytes();
  }

  get longToken(): Address {
    return this[4].toAddress();
  }

  get shortToken(): Address {
    return this[5].toAddress();
  }

  get collateralToken(): Address {
    return this[6].toAddress();
  }

  get financialProductLibrary(): Address {
    return this[7].toAddress();
  }

  get customAncillaryData(): Bytes {
    return this[8].toBytes();
  }

  get prepaidProposerReward(): BigInt {
    return this[9].toBigInt();
  }

  get optimisticOracleLivenessTime(): BigInt {
    return this[10].toBigInt();
  }

  get optimisticOracleProposerBond(): BigInt {
    return this[11].toBigInt();
  }

  get finder(): Address {
    return this[12].toAddress();
  }

  get timerAddress(): Address {
    return this[13].toAddress();
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get tokensToCreate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get collateralUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExpireCall extends ethereum.Call {
  get inputs(): ExpireCall__Inputs {
    return new ExpireCall__Inputs(this);
  }

  get outputs(): ExpireCall__Outputs {
    return new ExpireCall__Outputs(this);
  }
}

export class ExpireCall__Inputs {
  _call: ExpireCall;

  constructor(call: ExpireCall) {
    this._call = call;
  }
}

export class ExpireCall__Outputs {
  _call: ExpireCall;

  constructor(call: ExpireCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get tokensToRedeem(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get collateralReturned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetCurrentTimeCall extends ethereum.Call {
  get inputs(): SetCurrentTimeCall__Inputs {
    return new SetCurrentTimeCall__Inputs(this);
  }

  get outputs(): SetCurrentTimeCall__Outputs {
    return new SetCurrentTimeCall__Outputs(this);
  }
}

export class SetCurrentTimeCall__Inputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }

  get time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurrentTimeCall__Outputs {
  _call: SetCurrentTimeCall;

  constructor(call: SetCurrentTimeCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get longTokensToRedeem(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get shortTokensToRedeem(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get collateralReturned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
